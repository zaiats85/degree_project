type AuthPayload {
    token: String
    user: User
}

type User {
    id: ID!
    name: String!
    email: String!
    links: [Link!]!
}

type Query {
    info: String!
    feed: [Link!]!
    people: [Member!]!
}

type Query {
    # Fetch a single link by its id
    link(id: ID!): Link
}

#mutation deleteLink($id: ID!) {
#    deleteLink(id: $id) {
#        id
#    }
#}

type Mutation {
    # Delete a link
    deleteLink(id: ID!): Link
}


type Mutation {
    # Update a link
    updateLink(id: ID!, url: String, description: String): Link
}

type Mutation {
    # Create a link
    post(url: String!, description: String!): Link!
    signup(email: String!, password: String!, name: String!): AuthPayload
    login(email: String!, password: String!): AuthPayload
}

type Link {
    id: ID!
    description: String!
    url: String!
    members: [Member]!
    postedBy: User
}

type Member {
    name: String!
    age: Int
    budget: Int
}
